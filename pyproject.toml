[project]
name = "cumulus-aggregator"
requires-python = ">= 3.10"
version = "0.3.0"
# This project is designed to run on the AWS serverless application framework (SAM).
# The project dependencies are handled via AWS layers. These are only required for
# local development.
dependencies= [
    "arrow >=1.2.3",
    "awswrangler >=3.5, <4",
    "boto3",
    "cumulus-library >=4.1",
    "Jinja2 >=3.1.4, <4",
    "pandas >=2, <3",
    "requests", # scripts only
    "rich",
]
authors = [
  { name="Matt Garber", email="matthew.garber@childrens.harvard.edu" },
]
description = "Aggregates data from distributed hopsitals for display in Cumulus dashboard"
readme = "README.md"
license = { text="Apache License 2.0" }
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
"Homepage" = "https://github.com/smart-on-fhir/cumulus-aggregator"

[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project.optional-dependencies]
test = [
    # TODO: We are investigating some new features around athena mocks, 
    # which currently only exist in 4.1.5 and are broken in 4.1.6dev. Swing back
    # around on this as the functionality matures.
    "coverage >=7.3.1",
    "freezegun",
    "moto[s3,athena,sns] == 4.1.5",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-subprocess",
    "responses",
]
dev = [
    "duckdb",
    "pre-commit",
    "ruff < 0.9",
    "sqlfluff >= 3.2.5"
]

[tool.flit.module]
name = "src"
[tool.coverage.run]
omit = [
    "*/api_gateway_authorizer.py",
]

[tool.pytest.ini_options]
pythonpath = [
    # we use this to get 'shared' and 'filter_config' as root level packages, which matches
    # the packaging in the lambda environment, allowing unit tests to function
    'src/',
    'src/dashboard/get_chart_data',
]


[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
allowed-confusables = ["â€™"]  # allow proper apostrophes
select = [
    "A",  # prevent using keywords that clobber python builtins
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "PLE",  # pylint errors
    "RUF",  # the ruff developer's own rules
    "S",  # bandit security warnings
    "UP",  # alert you when better syntax is available in your python version
]
[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]  # init files hold API, so not using imports is intentional
"tests/**" = ["S"]  # tests do suspicious stuff that's fine, actually