AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  SAM stack for Cumulus aggregator 
Transform:
- AWS::Serverless-2016-10-31

# TODO: The global section is only meant for the dashboard API. We may want to split
# out the dashboard API into its own cloudformation template to limit this scope.

Globals:
  Api:
    Cors:
      AllowMethods: "'GET'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  BucketNameParameter:
    Type: String
    Default: cumulus-aggregator
  GlueNameParameter:
    Type: String
    Default: cumulus-aggregator
  AthenaWorkgroupNameParameter:
    Type: String
    Default: cumulus-aggregator
  DeployStage:
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
  RetentionTime:
    Type: Number
  LogLevel:
    Type: String
    AllowedValues:
      - TRACE
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - FATAL
    Default: INFO
  LogFormat:
    Type: String
    AllowedValues:
      - Text
      - JSON
    Default: JSON
  RemoteAccounts:
    Type: CommaDelimitedList
  NetworkName:
    Type: String

Resources:

### Lambda Functions

  # Data Processing

  FetchAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggFetchAuthorizer-${DeployStage}-${NetworkName}'
      CodeUri: ./src/site_upload/api_gateway_authorizer
      Handler: api_gateway_authorizer.lambda_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggFetchAuthorizer-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 100
      Description: Validates credentials before providing signed urls
      Environment:
        Variables:
          SECRET_NAME: !Sub 'CumulusUserSecrets-${DeployStage}-${NetworkName}'
          REGION: !Ref "AWS::Region"
      Policies:
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn
        - Statement:
          - Sid: SecretsPolicy
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref UserSecrets

  FetchAuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FetchAuthorizerFunction}"
      RetentionInDays: !Ref RetentionTime

  FetchUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggFetchUploadUrl-${DeployStage}-${NetworkName}'
      CodeUri: ./src/site_upload/fetch_upload_url
      Handler: fetch_upload_url.upload_url_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggFetchUploadUrl-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 100
      Description: Generates a presigned URL for uploading files to S3
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          REGION: !Ref "AWS::Region"
      Events:
        SiteUploadAPI:
          Type: Api
          Properties:
            RestApiId: !Ref SiteApiGateway
            Path: /
            Method: POST
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  FetchUploadUrlLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FetchUploadUrlFunction}"
      RetentionInDays: !Ref RetentionTime

  ProcessUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggProcessUpload-${DeployStage}-${NetworkName}'
      CodeUri: ./src/site_upload/process_upload
      Handler: process_upload.process_upload_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggProcessUpload-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 800
      Description: Handles initial relocation of upload data
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          TOPIC_PROCESS_COUNTS_ARN: !Ref SNSTopicProcessCounts
          TOPIC_PROCESS_FLAT_ARN: !Ref SNSTopicProcessFlat
          TOPIC_PROCESS_STUDY_META_ARN: !Ref SNSTopicProcessStudyMeta
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopicProcessCounts.TopicName
        - SNSPublishMessagePolicy:
           TopicName: !GetAtt SNSTopicProcessFlat.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopicProcessStudyMeta.TopicName
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  ProcessUploadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProcessUploadFunction}"
      RetentionInDays: !Ref RetentionTime

  PowersetMergeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggPowersetMerge-${DeployStage}-${NetworkName}'
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      CodeUri: ./src/site_upload/powerset_merge
      Handler: powerset_merge.powerset_merge_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggPowersetMerge-${DeployStage}-${NetworkName}"
      MemorySize: 8192
      Timeout: 800
      Description: Merges and aggregates powerset count data
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          TOPIC_CACHE_API_ARN: !Ref SNSTopicCacheAPI
      Events:
        ProcessCountsUploadSNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicProcessCounts
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopicCacheAPI.TopicName
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  PowersetMergeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PowersetMergeFunction}"
      RetentionInDays: !Ref RetentionTime

  ProcessFlatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggProcessFlat-${DeployStage}-${NetworkName}'
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      CodeUri: ./src/site_upload/process_flat
      Handler: process_flat.process_flat_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggProcessFlat-${DeployStage}-${NetworkName}"
      MemorySize: 8192
      Timeout: 800
      Description: Merges and aggregates powerset count data
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          TOPIC_CACHE_API_ARN: !Ref SNSTopicCacheAPI
      Events:
        ProcessFlatUploadSNSEvent:
         Type: SNS
         Properties:
           Topic: !Ref SNSTopicProcessFlat
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopicCacheAPI.TopicName
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  ProcessFlatLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProcessFlatFunction}"
      RetentionInDays: !Ref RetentionTime

  StudyPeriodFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggStudyPeriod-${DeployStage}-${NetworkName}'
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      CodeUri: ./src/site_upload/study_period
      Handler: study_period.study_period_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggStudyPeriod-${DeployStage}-${NetworkName}"
      MemorySize: 512
      Timeout: 800
      Description: Handles metadata outside of upload/processing for studies
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      Events:
        ProcessUploadSNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicProcessStudyMeta
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  StudyPeriodLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StudyPeriodFunction}"
      RetentionInDays: !Ref RetentionTime

  CacheAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggCacheAPI-${DeployStage}-${NetworkName}'
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      CodeUri: ./src/site_upload/cache_api
      Handler: cache_api.cache_api_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggCacheAPI-${DeployStage}-${NetworkName}"
      MemorySize: 512
      Timeout: 800
      Description: Caches selected database queries to S3
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          GLUE_DB_NAME: !Sub '${GlueNameParameter}-${DeployStage}-${NetworkName}'
          WORKGROUP_NAME: !Sub '${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
      Events:
        CacheAPISNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicCacheAPI
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: GluePermissionsPolicy
            Effect: Allow
            Action:
              - glue:*Table*
              - glue:*Partition*
            Resource:
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueNameParameter}-${DeployStage}-${NetworkName}'
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueNameParameter}-${DeployStage}-${NetworkName}/*'
        - Statement:
          - Sid: AthenaExecuteQueryPermissionsPolicy
            Effect: Allow
            Action:
              - athena:*
            Resource: !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  CacheAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CacheAPIFunction}"
      RetentionInDays: !Ref RetentionTime

  # Dashboard API

  DashboardGetChartDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardGetChartData-${DeployStage}-${NetworkName}'
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      CodeUri: ./src/dashboard/get_chart_data
      Handler: get_chart_data.chart_data_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardGetChartData-${DeployStage}-${NetworkName}"
      MemorySize: 2048
      Timeout: 100
      Description: Retrieve data for chart display in Cumulus Dashboard
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          GLUE_DB_NAME: !Sub '${GlueNameParameter}-${DeployStage}-${NetworkName}'
          WORKGROUP_NAME: !Sub '${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
      Events:
        GetChartDataAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /data-packages/{data_package_id}/chart
            Method: GET
            RequestParameters: 
              - method.request.querystring.column:
                  Required: true
              - method.request.querystring.filters:
                  Required: false
              - method.request.querystring.stratifier:
                  Required: false
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref AggregatorBucket
        - Statement:
          - Sid: GluePermissionsPolicy
            Effect: Allow
            Action:
              - glue:*Table*
              - glue:*Partition*
            Resource:
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueNameParameter}-${DeployStage}-${NetworkName}'
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueNameParameter}-${DeployStage}-${NetworkName}/*'
        - Statement:
          - Sid: AthenaExecuteQueryPermissionsPolicy
            Effect: Allow
            Action:
              - athena:*
            Resource: !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: DecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  DashboardGetChartDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardGetChartDataFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardGetMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardGetMetadata-${DeployStage}-${NetworkName}'
      CodeUri: ./src/dashboard/get_metadata
      Handler: get_metadata.metadata_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardGetMetadata-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 100
      Description: Retrieve data about site uploads
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      Events:
        GetMetadataAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /metadata/
            Method: GET
        GetMetadataSiteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /metadata/{site}/
            Method: GET
        GetMetadataSiteStudyAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /metadata/{site}/{study}
            Method: GET
        GetMetadataSiteStudySubscriptionAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /metadata/{site}/{study}/{data_package}
            Method: GET
        GetMetadataSiteStudySubscriptionVersionAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /metadata/{site}/{study}/{data_package}/{version}
            Method: GET
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  DashboardGetMetadataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardGetMetadataFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardDataPackagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardDataPackages-${DeployStage}-${NetworkName}'
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      CodeUri: ./src/dashboard/get_data_packages
      Handler: get_data_packages.data_packages_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardDataPackages-${DeployStage}-${NetworkName}"
      MemorySize: 512
      Timeout: 100
      Description: Retrieve data for chart display in Cumulus Dashboard
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          GLUE_DB_NAME: !Sub '${GlueNameParameter}-${DeployStage}-${NetworkName}'
          WORKGROUP_NAME: !Sub '${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
      Events:
        DataPackagesAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /data-packages
            Method: GET
            RequestParameters: 
              - method.request.querystring.name:
                  Required: false
        DataPackagesIDAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /data-packages/{data_package_id}
            Method: GET
      # TODO: it :should: be possible to move these policies to a central role/policy
      # set that can be referenced in multiple places; see
      # https://stackoverflow.com/questions/64523817/aws-sam-multiple-functions-with-same-inline-policy
      # However - this causes a lot of nested policy conflicts that might require a
      # more comprehensive policy/role overhaul.
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref AggregatorBucket
        - Statement:
          - Sid: GlueSubscriptionsPolicy
            Effect: Allow
            Action:
              - glue:*Table*
              - glue:*Partition*
            Resource:
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueNameParameter}-${DeployStage}-${NetworkName}'
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueNameParameter}-${DeployStage}-${NetworkName}/*'
        - Statement:
          - Sid: AthenaSubscriptionsPolicy
            Effect: Allow
            Action:
              - athena:StartQueryExecution
              - athena:GetQueryResults
              - athena:GetWorkGroup
              - athena:GetQueryExecution
              - athena:StopQueryExecution
            Resource: !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  DashboardDataPackagesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardDataPackagesFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardGetStudyPeriodsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardStudyPeriods-${DeployStage}-${NetworkName}'
      CodeUri: ./src/dashboard/get_study_periods
      Handler: get_study_periods.study_periods_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardStudyPeriods-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 100
      Description: Retrieve data about the study period
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      Events:
        GetStudyPeriodAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /study-periods/
            Method: GET
        GetStudyPeriodSiteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /study-periods/{site}/
            Method: GET
        GetStudyPeriodSiteStudyAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /study-periods/{site}/{study}
            Method: GET
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: DecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  DashboardGetStudyPeriodsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardGetStudyPeriodsFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardGetFromParquetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardFromParquet-${DeployStage}-${NetworkName}'
      CodeUri: ./src/dashboard/get_from_parquet
      Handler: get_from_parquet.from_parquet_handler
      Runtime: "python3.11"
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:17]
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardFromParquet-${DeployStage}-${NetworkName}"
      MemorySize: 512
      Timeout: 100
      Description: Retrieve data from a parquet source
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      Events:
        GetFromParquetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /from-parquet/
            Method: GET
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: DecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  DashboardGetFromParquetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardGetFromParquetFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardGetStaticFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardStatic-${DeployStage}-${NetworkName}'
      CodeUri: ./src/dashboard/get_static
      Handler: get_static.static_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardStatic-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 100
      Description: Retrieve data about the study period
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      Events:
        GetStaticiteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /static/{path+}
            Method: GET
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: DecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn

  DashboardGetStaticLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardGetStaticFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardPostDistributeStudyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardDistributeStudy-${DeployStage}-${NetworkName}'
      CodeUri: ./src/dashboard/post_distribute
      Handler: post_distribute.distribute_handler
      Runtime: "python3.11"
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardDistributeStudy-${DeployStage}-${NetworkName}"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          TOPIC_QUEUE_API_ARN: !Ref SNSTopicQueueDistribution
      Events:
        PostDistributeStudyAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApiGateway
            Path: /distribute/
            Method: Post
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopicQueueDistribution.TopicName

  DashboardPostDistributeStudyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardPostDistributeStudyFunction}"
      RetentionInDays: !Ref RetentionTime

  DashboardQueueDistributeStudyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CumulusAggDashboardQueueStudy-${DeployStage}-${NetworkName}'
      PackageType: Image
      ImageConfig:
        Command: ["queue_distribute.queue_handler"]
      LoggingConfig:
        ApplicationLogLevel: !Ref LogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/CumulusAggDashboardQueueStudy-${DeployStage}-${NetworkName}"
      MemorySize: 512
      Timeout: 100
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
          TOPIC_STUDY_PAYLOAD_ARN: !Ref SNSStudyPayload
      Events:
        ProcessQueueDistributeSNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicQueueDistribution
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
        - Statement:
          - Sid: KMSDecryptPolicy
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !ImportValue cumulus-kms-KMSKeyArn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSStudyPayload.TopicName
    Metadata:
      Dockerfile: queue_distribute.Dockerfile
      DockerContext: ./src/
      DockerTag: v1

  DashboardQueueDistributeStudyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DashboardQueueDistributeStudyFunction}"
      RetentionInDays: !Ref RetentionTime

### Lambda permissions

  ProcessUploadFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ProcessUploadFunction
      Principal: s3.amazonaws.com
      #This can't be a !Ref due to circular refs
      SourceArn: !Sub 'arn:aws:s3:::${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      SourceAccount: !Ref AWS::AccountId

### SNS topics
  SNSTopicProcessCounts:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'CumulusProcessCounts-${DeployStage}-${NetworkName}'
      Tags:
        - Key: Name
          Value: !Sub 'CumulusProcessCounts-${DeployStage}-${NetworkName}'

  SNSTopicProcessFlat:
   Type: AWS::SNS::Topic
   Properties:
     TopicName: !Sub 'CumulusProcessFlat-${DeployStage}-${NetworkName}'
     Tags:
       - Key: Name
         Value: !Sub 'CumulusProcessFlat-${DeployStage}-${NetworkName}'

  SNSTopicProcessStudyMeta:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'CumulusProcessStudyMeta-${DeployStage}-${NetworkName}'
      Tags:
        - Key: Name
          Value: !Sub 'CumulusProcessStudyMeta-${DeployStage}-${NetworkName}'

  SNSTopicCacheAPI:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'SNSTopicCacheAPI-${DeployStage}-${NetworkName}'
      Tags:
        - Key: Name
          Value: !Sub 'SNSTopicCacheAPI-${DeployStage}-${NetworkName}'

  SNSTopicQueueDistribution:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'SNSTopicQueueDistribution-${DeployStage}-${NetworkName}'
      Tags:
        - Key: Name
          Value: !Sub 'SNSTopicQueueDistribution-${DeployStage}-${NetworkName}'

  SNSStudyPayload:
    Type: AWS::SNS::Topic
    Properties:
      ContentBasedDeduplication: True
      FifoTopic: True
      TopicName: !Sub 'SNSStudyPayload-${DeployStage}-${NetworkName}.fifo'
      Tags:
        - Key: Name
          Value: !Sub 'SNSStudyPayload-${DeployStage}-${NetworkName}.fifo'

  SNSStudyPayloadPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref RemoteAccounts
            Action: 
              - sns:Subscribe
            Resource: !Ref SNSStudyPayload
      Topics: 
        - !Ref SNSStudyPayload

### S3 Buckets

  AggregatorBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ProcessUploadFunctionPermission
    Properties:
      BucketName: !Sub '${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessUploadFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'site_upload/'

### Glue Resources

  GlueDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub '${GlueNameParameter}-${DeployStage}-${NetworkName}'
        Description: Database for serving data to the Cumulus Dashboard

  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${GlueNameParameter}-crawler-${DeployStage}-${NetworkName}'
      DatabaseName: !Ref GlueDB
      Role: !GetAtt CrawlerRole.Arn
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableLevelConfiguration\":5}}"
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING
      SchemaChangePolicy:
        DeleteBehavior: DELETE_FROM_DATABASE
        UpdateBehavior: UPDATE_IN_DATABASE
      Schedule:
        ScheduleExpression: "cron(0 22 ? * SUN *)"
      Targets:
        S3Targets:
          - Path: !Sub '${AggregatorBucket}/aggregates'
          - Path: !Sub '${AggregatorBucket}/flat'

  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub '${AthenaWorkgroupNameParameter}-${DeployStage}-${NetworkName}'
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: True
        PublishCloudWatchMetricsEnabled: True
        EngineVersion:
          SelectedEngineVersion: "Athena engine version 3"
        ResultConfiguration:
          OutputLocation: !Sub "s3://${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}/athena/"

### User login secrets

  UserSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'CumulusUserSecrets-${DeployStage}-${NetworkName}'
      Description: Upload credentials for Cumulus Users
      # By default, we'll initiate this to an empty JSON object, and populate it via other methods.
      SecretString: '{}'
      KmsKeyId: !ImportValue cumulus-kms-KMSKeyArn

### IAM Roles

  FetchAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  CrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
      Policies:
        - PolicyName: S3BucketAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}/aggregates/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${BucketNameParameter}-${AWS::AccountId}-${DeployStage}-${NetworkName}/flat/*"
              - Sid: KMSDecryptPolicy
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !ImportValue cumulus-kms-KMSKeyArn


### API Gateways

# If you need to enable logging at the API Gateway level, uncomment the nodes
# in this section. This should be left disabled for production since it is noisy
# and not useful for troubleshooting 95% of lambda issues.

  SiteApiGateway:
    Type: AWS::Serverless::Api
    Name: !Sub "CumulusAggregatorSiteApi-${DeployStage}-${NetworkName}"
#    DependsOn: ApiCWLRoleArn
    Properties:
      StageName: !Ref DeployStage
      Auth:
        Authorizers:
          FetchAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt FetchAuthorizerFunction.Arn
            Identity:
              Headers: [Authorization]
        DefaultAuthorizer: FetchAuth
#      MethodSettings:
#        - LoggingLevel: INFO
#          MetricsEnabled: True
#          DataTraceEnabled: True
#          ResourcePath: '/*' # allows for logging on any resource
#          HttpMethod: '*' # allows for logging on any method

  DashboardApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref DeployStage
      Name: !Sub "CumulusAggregatorDashboardApi-${DeployStage}-${NetworkName}"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: !Sub "Usage plan for Cumulus dashboard ${DeployStage}-${NetworkName} API"
          UsagePlanName: !Sub "CumulusAggregatorDashboardUsagePlan-${DeployStage}-${NetworkName}"


### Cloudwatch Logging infra for API gateway

# The following ensures that logs generated by SiteAPIGateway will actually get
# to cloudwatch for the gateway

    # ApiCWLRoleArn:
    #  Type: AWS::ApiGateway::Account
    #  Properties:
    #    CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

    # CloudWatchRole:
    #    Type: AWS::IAM::Role
    #    Properties:
    #      AssumeRolePolicyDocument:
    #        Version: '2012-10-17'
    #        Statement:
    #          Action: 'sts:AssumeRole'
    #          Effect: Allow
    #          Principal:
    #            Service: apigateway.amazonaws.com
    #      Path: /
    #      ManagedPolicyArns:
    #        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'


### Proxy Bindings
# These add proxy endpoints to the fanout proxies created in proxy.yaml

  NetworkSiteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
          Fn::ImportValue:
            Fn::Sub: "CumulusSiteApiRootResource-${DeployStage}"
      PathPart: !Ref NetworkName
      RestApiId: 
        Fn::ImportValue: 
          Fn::Sub: "CumulusSiteApiProxy-${DeployStage}"

  NetworkSiteProxyPassthrough:
    DependsOn: NetworkSiteResource
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref NetworkSiteResource
      PathPart: "{proxy+}"
      RestApiId: 
        Fn::ImportValue: 
          Fn::Sub: "CumulusSiteApiProxy-${DeployStage}"

  NetworkSiteRootMethod:
    DependsOn: 
    - SiteApiGateway
    - NetworkSiteResource
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration: 
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'https://${SiteApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeployStage}'
      ResourceId: !Ref NetworkSiteResource
      RestApiId: 
        Fn::ImportValue:
            Fn::Sub: "CumulusSiteApiProxy-${DeployStage}"

  NetworkSitePassthroughMethod:
    DependsOn: 
    - SiteApiGateway
    - NetworkSiteProxyPassthrough
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration: 
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'https://${SiteApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeployStage}'
      ResourceId: !Ref NetworkSiteProxyPassthrough
      RestApiId: 
        Fn::ImportValue:
            Fn::Sub: "CumulusSiteApiProxy-${DeployStage}"

  NetworkDashboardResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
          Fn::ImportValue:
            Fn::Sub: "CumulusDashboardApiRootResource-${DeployStage}"
      PathPart: !Ref NetworkName
      RestApiId: 
        Fn::ImportValue: 
          Fn::Sub: "CumulusDashboardApiProxy-${DeployStage}"

  NetworkDashboardProxyPassthrough:
    DependsOn: NetworkDashboardResource
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref NetworkDashboardResource
      PathPart: "{proxy+}"
      RestApiId: 
        Fn::ImportValue: 
          Fn::Sub: "CumulusDashboardApiProxy-${DeployStage}"

  NetworkDashboardPassthroughMethod:
    DependsOn: 
    - DashboardApiGateway
    - NetworkDashboardProxyPassthrough
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration: 
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'https://${DashboardApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeployStage}/{proxy}'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
      ResourceId: !Ref NetworkDashboardProxyPassthrough
      RestApiId: 
        Fn::ImportValue:
            Fn::Sub: "CumulusDashboardApiProxy-${DeployStage}"


Outputs:

  SiteAPIArn:
    Value: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${SiteApiGateway}/stages/${DeployStage}-${NetworkName}"
    Export:
      Name: !Sub "${AWS::StackName}-SiteAPIArn"

  DashboardAPIArn:
    Value: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${DashboardApiGateway}/stages/${DeployStage}-${NetworkName}"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardAPIArn"