AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  cumulus-aggregator
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  BucketNameParameter:
    Type: String
    Default: cumulus-aggregator-site-counts

Resources:

### Lambda Functions

  FetchAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers: [arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-bcrypt:5]
      Handler: src/handlers/api_gateway_authorizer.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 100
      Description: Validates credentials before providing signed urls

  FetchUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/fetch_upload_url.upload_url_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 100
      Description: Generates a presigned URL for uploading files to S3
      Environment:
        Variables:
          BUCKET_NAME: !Sub '${BucketNameParameter}'
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId:
              Ref: SiteApiGateway
            Path: /
            Method: POST
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketNameParameter

  PowersetMergeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers: [arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:1]
      Handler: src/handlers/powerset_merge.powerset_merge_handler
      Runtime: python3.9
      MemorySize: 4096
      Timeout: 800
      Description: Merges and aggregates powerset count data
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketNameParameter

### Lambda permissions

  PowersetMergeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PowersetMergeFunction
      Principal: s3.amazonaws.com
      #This can't be a !Ref due to circular refs
      SourceArn: !Sub 'arn:aws:s3:::${BucketNameParameter}'
      SourceAccount: !Ref AWS::AccountId

# S3 Buckets

  AggregatorBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - PowersetMergeFunctionPermission
    Properties:
      BucketName: !Sub '${BucketNameParameter}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt PowersetMergeFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'site_uploads/'

### IAM Roles 

  FetchAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

### API Gateways

# If you need to enable logging at the API Gateway level, uncomment the nodes 
# in this section. This should be left disabled for production since it is noisy
# and not useful for troubleshooting 95% of lambda issues.

  SiteApiGateway:
    Type: AWS::Serverless::Api
#    DependsOn: ApiCWLRoleArn 
    Properties:
      StageName: Prod
      Auth:
        Authorizers: 
          FetchAuth: 
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt FetchAuthorizerFunction.Arn
            Identity:
              Headers: [Authorization,user]
        DefaultAuthorizer: FetchAuth
#      MethodSettings:
#        - LoggingLevel: INFO
#          MetricsEnabled: True
#          DataTraceEnabled: True
#          ResourcePath: '/*' # allows for logging on any resource
#          HttpMethod: '*' # allows for logging on any method

### Cloudwatch Logging infra for API gateway

# The following ensures that logs generated by SiteAPIGateway will actually get
# to cloudwatch for the gateway

#  ApiCWLRoleArn:
#    Type: AWS::ApiGateway::Account
#    Properties: 
#      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

#  CloudWatchRole:
#      Type: AWS::IAM::Role
#      Properties:
#        AssumeRolePolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            Action: 'sts:AssumeRole'
#            Effect: Allow
#            Principal:
#              Service: apigateway.amazonaws.com
#        Path: /
#        ManagedPolicyArns:
#          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${SiteApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
